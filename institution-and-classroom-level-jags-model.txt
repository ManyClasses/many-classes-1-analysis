### data dictionary
# delta.z[s] is the difference in z-scores for individual student s (immediate - delayed)
# n.students is the number of unique students
# class.index[s] is student s's class ID
# class.condition[c] is classroom c's incentive condition
# n.classes is the number of unique classes
# n.metric.moderators is the number of moderating variables with metric scales
# n.nominal.moderators is the number of moderating variables with nominal scales
# y.metric[1:n.metric.moderators, c] is the vector of values of the metric moderators for classroom c
# y.nominal[1:n.nominal.moderators, c] is the vector of values of the nominal moderators for classroom c
# n.conditions is the number of unique conditions that split all the moderators (here it will be 2 for no incentive and yes incentive)
# n.levels.nominal.moderator[n] is the number of unique levels for nominal moderator n

### parameter dictionary
# mu.class[c] is the mean of the distribution from which delta.z scores are drawn for class c
# sigma.class[c] is the sd of the distribution from which delta.z scores are drawn for class c
# beta.intercept[x] is the intercept of the linear model for incentive condition x
# beta.metric[a,x] is the coefficient of metric predictor a in incentive condition x
# beta.nominal[a,x,l] is the centered (sum to zero across levels l) coefficient of the nominal predictor a in incentive condition x for level l
# sigma.mode[i] is the mode of the distribution from which classroom sigma parameters are drawn for condition i
# sigma.sd[i] is the sd of the distribution from which classroom sigma parameters are drawn for condition i

model {
  for(s in 1:n.students){
    delta.z[s] ~ dnorm(mu.class[class.index[s]], 1 / sigma.class[class.index[s]] ^ 2)
  }
  for(c in 1:n.classes){
    mu.class[c] <- beta.intercept[class.condition[c]] + 
      sum(beta.metric[1:n.metric.moderators, class.condition[c]] * y.metric[1:n.metric.moderators,c]) +
      sum(beta.nominal[1:n.nominal.moderators, class.condition[c], y.nominal[1:n.nominal.moderators,c])
      
    sigma.class[c] ~ dgamma(sh.class.condition[class.condition[c]], ra.class.condition[class.condition[c]])
  }
  for(i in 1:n.conditions){
    ra.class.condition[i] <- (sigma.mode[i] + sqrt(sigma.mode[i]^2 + 4*sigma.sd[i]^2)) / (2 * sigma.sd[i]^2)
    sh.class.condition[i] <- 1 + sigma.mode[i] * ra.class.condition[i]
    
    sigma.mode[i] ~ dgamma(1.640388, 1.280776) # mode = 0.5, sd = 1
    sigma.sd[i] ~ dgamma(1.640388, 1.280776) # mode = 0.5, sd = 1
    
    beta.intercept[i] ~ dnorm(0,1)
    
    for(m in 1:n.metric.moderators){
      beta.metric[m,i] ~ dnorm(0,1)
    }
    for(n in 1:n.nominal.moderators){
      for(l in 1:n.levels.nominal.moderator[n]){
        beta.nominal.uncentered[n,i,l] ~ dnorm(0,1)
        beta.nominal[n,i,l] <- beta.nominal.uncentered[n,i,l] - mean(beta.nominal.uncentered[n,i,1:n.levels.nominal.moderator[n]])
      }
    }
  }
}